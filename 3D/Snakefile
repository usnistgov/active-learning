# run with `snakemake --cores 1`

from pathlib import Path

configfile: "config.yaml"

n_iterations = config['n_iterations']
scoring = config['scoring']
n_query = config['n_query']
job_name = config['job_name']
cutoff = config['cutoff']
nu = config['nu']
ylog = config['ylog']
n_projections = config['n_projections']

work_dir = lambda x: str( Path(f"{job_name}") / x)


rule all:
    input:
        work_dir("plot.png"),
        work_dir("config.yaml"),
        work_dir("plot-wasserstein.png"),
        work_dir("plot-diversity.png"),
        work_dir("plot-uncertainty.png")	

rule ipynb:
    input:
        "{notebook}.md"
    output:
        "{notebook}.ipynb"
    shell:
        "jupytext {input} --to ipynb"

rule config:
    output:
        config_file=work_dir("config.yaml")
    params:
        config=config,
        pythonpath=os.environ["PYTHONPATH"]
    shell:
        "IFS=: read -r python_ other <<< $PYTHONPATH;"
        "$python_ -c \"import yaml; print(yaml.dump({params.config}))\" >> {output.config_file};"
        "echo \"commit_hash: $(git log -1 --pretty=format:\\\"%h\\\")\" >> {output.config_file};"
        "echo \"date: \\\"$(date)\\\"\" >> {output.config_file}"


rule pca:
    input:
        da="data_shuffled.npz",
        nb="pca-analysis.ipynb"
    output:
        nb=work_dir("pca-analysis.ipynb"),
        da=work_dir("data-pca.npz")
    params:
        cutoff=cutoff
    shell:
        "papermill {input.nb} {output.nb} -p output_file {output.da} -p input_file {input.da} -p cutoff {params.cutoff}"


rule run_active:
    input:
        da=work_dir("data-pca.npz"),
        nb="run-active.ipynb"
    output:
        da=work_dir("active_{iteration}.npz"),
        ts=work_dir("active_train_save_{iteration}.npz"),
        nb=work_dir("run-active-{iteration}.ipynb"),
        da_uncertainty=work_dir("active_uncertainty_{iteration}.npz")
    params:
        n_query=n_query,
        scoring=scoring,
        nu=nu
    shell:
        "papermill {input.nb} {output.nb} -p output_file {output.da} -p input_file {input.da} -p scoring {params.scoring} -p n_query {params.n_query} -p nu {params.nu} -p output_file_train_save {output.ts} -p output_uncertainty_file {output.da_uncertainty}"


rule overall:
    input:
        da=work_dir("data-pca.npz"),
        nb="overall-accuracy.ipynb"
    output:
        da=work_dir("overall.npz"),
        nb=work_dir("overall.ipynb")
    params:
        n_iterations=n_iterations,
        scoring=scoring,
        nu=nu
    shell:
        "papermill {input.nb} {output.nb} -p output_file {output.da} -p input_file {input.da} -p scoring {params.scoring} -p n_iterations {params.n_iterations} -p nu {params.nu}"


rule curves:
    input:
        da=[work_dir(f"active_{i}.npz") for i in range(n_iterations)],
        nb="curves.ipynb"
    output:
        f0=work_dir("uncertainty-curve.npz"),
        f1=work_dir("random-curve.npz"),
        f2=work_dir("gsx-curve.npz"),
        f3=work_dir("gsy-curve.npz"),
        f4=work_dir("igs-curve.npz"),
        nb=work_dir("curves.ipynb")
    params:
        wd=work_dir(".")
    log:
        lg=work_dir("curves.log")
    shell:
        "FILES=$(echo '{input.da}' | tr ' ' ,);"
        "papermill {input.nb} {output.nb} -p work_dir {params.wd} -y \"input_files: [ ${{FILES}} ]\"; > {log.lg} 2>&1"



rule plot:
    input:
        f1=work_dir("uncertainty-curve.npz"),
        f2=work_dir("random-curve.npz"),
        f3=work_dir("gsx-curve.npz"),
        f4=work_dir("gsy-curve.npz"),
        f5=work_dir("igs-curve.npz"),
        nb="plot.ipynb",
        ov=work_dir("overall.npz")
    output:
        da=work_dir("plot.png"),
        nb=work_dir("plot.ipynb")
    params:
        wd=work_dir("."),
        scoring=scoring,
        ylog=ylog
    shell:
        "papermill {input.nb} {output.nb} -p work_dir {params.wd} -p output_file {output.da} -p scoring {params.scoring} -p overall_input_file {input.ov} -p ylog {params.ylog};"
	


rule plot_wasserstein:
    input:
        da=[work_dir(f"active_train_save_{i}.npz") for i in range(n_iterations)],
        nb="calc-wasserstein.ipynb",
        pca=work_dir("data-pca.npz")
    output:
        da=work_dir("plot-wasserstein.png"),
        nb=work_dir("calc-wasserstein.ipynb")
    params:
        n_projections=n_projections
    shell:
        "FILES=$(echo '{input.da}' | tr ' ' ,);"
        "papermill {input.nb} {output.nb} -p plot_file {output.da} -p pca_input_file {input.pca} -p n_projections {params.n_projections} -y \"active_input_files: [ ${{FILES}} ]\";"


rule calc_diversity:
    input:
        da=[work_dir(f"active_train_save_{i}.npz") for i in range(n_iterations)],
        nb="calc-diversity.ipynb",
        pca=work_dir("data-pca.npz")
    output:
        f1=work_dir("uncertainty-diversity.npz"),
        f2=work_dir("random-diversity.npz"),
        f3=work_dir("gsx-diversity.npz"),
        f4=work_dir("gsy-diversity.npz"),
        f5=work_dir("igs-diversity.npz"),
        f6=work_dir("entropy.npz"),	
        nb=work_dir("calc-diversity.ipynb")
    params:
        wd=work_dir(".")
    shell:
        "FILES=$(echo '{input.da}' | tr ' ' ,);"
        "papermill {input.nb} {output.nb} -p work_dir {params.wd} -p pca_input_file {input.pca} -y \"active_input_files: [ ${{FILES}} ]\";"


rule plot_diversity:
    input:
        f1=work_dir("uncertainty-diversity.npz"),
        f2=work_dir("random-diversity.npz"),
        f3=work_dir("gsx-diversity.npz"),
        f4=work_dir("gsy-diversity.npz"),
        f5=work_dir("igs-diversity.npz"),
        f6=work_dir("entropy.npz"),	
        nb="plot-diversity.ipynb",
    output:
        da=work_dir("plot-diversity.png"),
        nb=work_dir("plot-diversity.ipynb")
    params:
        wd=work_dir(".")
    shell:
        "papermill {input.nb} {output.nb} -p plot_file {output.da} -p work_dir {params.wd};"


rule plot_uncertainty:
    input:
        da=[work_dir(f"active_uncertainty_{i}.npz") for i in range(n_iterations)],
        nb="calc-uncertainty.ipynb",
    output:
        da=work_dir("plot-uncertainty.png"),
        nb=work_dir("calc-uncertainty.ipynb")
    shell:
        "FILES=$(echo '{input.da}' | tr ' ' ,);"
        "papermill {input.nb} {output.nb} -p plot_file {output.da} -y \"uncertainty_input_files: [ ${{FILES}} ]\";"
        