# run with `snakemake --cores 1`

from pathlib import Path

configfile: "config.yaml"

n_iterations = config['n_iterations']
scoring = config['scoring']
n_query = config['n_query']
job_name = config['job_name']
cutoff = config['cutoff']
nu = config['nu']
ylog = config['ylog']

work_dir = lambda x: str( Path(f"{job_name}") / x)

rule all:
    input:
        work_dir("plot.png"),
        work_dir("config.yaml"),
        work_dir("plot-wasserstein.png")

rule ipynb:
    input:
        "{notebook}.md"
    output:
        "{notebook}.ipynb"
    shell:
        "jupytext {input} --to ipynb"


rule copy_stress:
    input:
        stress="data-gen/data-500.npz",
    output:
        stress=work_dir("data_shuffled.npz")
    shell:
        "cp {input.stress} {output.stress};"


rule config:
    output:
        config_file=work_dir("config.yaml")
    params:
        config=config,
        pythonpath=os.environ["PYTHONPATH"]
    shell:
        "IFS=: read -r python_ other <<< $PYTHONPATH;"
        "$python_ -c \"import yaml; print(yaml.dump({params.config}))\" >> {output.config_file};"
        "echo \"commit_hash: $(git log -1 --pretty=format:\\\"%h\\\")\" >> {output.config_file};"
        "echo \"date: \\\"$(date)\\\"\" >> {output.config_file}"

# rule data_gen:
#     input:
#         nb="generate-data.ipynb"
#     output:
#         nb=work_dir("generate-data.ipynb"),
#         da=work_dir("stress-data.npz")
#     params:
#         n_samples=n_samples,
#         dir_=gen_dir
#     shell:
#         "papermill {input.nb} {output.nb} -p output_file {output.da} -p n_samples {params.n_samples}"


rule pca:
    input:
        da=work_dir("data_shuffled.npz"),
        nb="pca-analysis.ipynb"
    output:
        nb=work_dir("pca-analysis.ipynb"),
        da=work_dir("data-pca.npz")
    shell:
        "papermill {input.nb} {output.nb} -p input_file {input.da} -p output_file {output.da}"


rule run_active:
    input:
        da=work_dir("data-pca.npz"),
        nb="run-active.ipynb"
    output:
        da=work_dir("active_{iteration}.npz"),
        ts=work_dir("active_train_save_{iteration}.npz"),
        nb=work_dir("run-active-{iteration}.ipynb")
    params:
        n_query=n_query,
        scoring=scoring,
        nu=nu
    shell:
        "papermill {input.nb} {output.nb} -p output_file {output.da} -p input_file {input.da} -p scoring {params.scoring} -p n_query {params.n_query} -p nu {params.nu} -p output_file_train_save {output.ts}"


rule overall:
    input:
        da=work_dir("data-pca.npz"),
        nb="overall-accuracy.ipynb"
    output:
        da=work_dir("overall.npz"),
        nb=work_dir("overall.ipynb")
    params:
        n_iterations=n_iterations,
        scoring=scoring,
        nu=nu
    shell:
        "papermill {input.nb} {output.nb} -p output_file {output.da} -p input_file {input.da} -p scoring {params.scoring} -p n_iterations {params.n_iterations} -p nu {params.nu}"


rule plot:
    input:
        da=[work_dir(f"active_{i}.npz") for i in range(n_iterations)],
        nb="plot.ipynb",
        ov=work_dir("overall.npz")
    output:
        da=work_dir("plot.png"),
        nb=work_dir("plot.ipynb")
    params:
        scoring=scoring,
        ylog=ylog
    shell:
        "FILES=$(echo '{input.da}' | tr ' ' ,);"
        "papermill {input.nb} {output.nb} -p output_file {output.da} -p scoring {params.scoring} -p overall_input_file {input.ov} -p ylog {params.ylog} -y \"input_files: [ ${{FILES}} ]\";"

rule plot_wasserstein:
    input:
        da=[work_dir(f"active_train_save_{i}.npz") for i in range(n_iterations)],
        nb="calc-wasserstein.ipynb",
        pca=work_dir("data-pca.npz")
    output:
        da=work_dir("plot-wasserstein.png"),
        nb=work_dir("calc-wasserstein.ipynb")
    shell:
        "FILES=$(echo '{input.da}' | tr ' ' ,);"
        "papermill {input.nb} {output.nb} -p plot_file {output.da} -p pca_input_file {input.pca} -y \"active_input_files: [ ${{FILES}} ]\";"
